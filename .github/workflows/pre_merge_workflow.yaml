#  # This workflow runs pre-commit checks first, then executes all API tests
name: Pull Request on main  branch Workflow

on:
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allows the workflow to be triggered manually

jobs:

  pre_commit_checks:
    name: Pre-Commit Checks  # This job will run first
    runs-on: arc-runner-lacework-dev-generic-lightweight

    steps:
      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform


      - name: Verify Terraform installation
        run: terraform --version
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12.3
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'

      - name: Install pre-commit and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit checks
        run: |
          pre-commit run --all-files

  test_on_pull_request:
    runs-on: arc-runner-lacework-dev-generic-lightweight

    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform


      - name: Verify Terraform installation
        run: terraform --version


      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12.3
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'

      - name: Create virtual environment and install dependencies
        run: |
            python -m venv .venv
            source .venv/bin/activate
            python -m pip install --upgrade pip
            python -m pip install -r pytest/fortiqa/tests/requirements.txt

      - name: Create user_config.yaml
        run: |
              cat <<EOF > pytest/fortiqa/tests/user_config.yaml
              app:
                workspace_id: "lacework_test"
                customer:
                  lw_api_key: "${{ secrets.FCSQA_LW_API_KEY }}"
                  lw_secret: "${{ secrets.FCSQA_LW_SECRET }}"
                  account_name: "fortiqa"
                  user_email: "fcsqagen2@yahoo.com"
                  user_email_password: "${{ secrets.FCSQA_USER_EMAIL_PASSWORD }}"
                  sub_account: "system-e2e"
              EOF

      - name: Check current working directory
        run: pwd

      - name: Print GitHub workspace directory
        run: |
            echo "GitHub workspace is: ${{ github.workspace }}"

      - name: List all files in the current directory
        run: ls -al

      - name: Capture test start time
        run: echo "test_start_time=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      - name: Run Pytest tests
        run: |
          source .venv/bin/activate
          cd pytest/fortiqa/tests
          pytest -m qa_pre_merge -s -vv -rA --html=report.html --self-contained-html --junitxml=results.xml | tee pytest_output.log
          test ${PIPESTATUS[0]} -eq 0

      - name: Capture test end time
        if: always()
        run: echo "test_end_time=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      - name: Print test start and end times  # For debugging
        if: always()
        run: |
          echo "Test start time: ${{ env.test_start_time }}"
          echo "Test end time: ${{ env.test_end_time }}"

      - name: Publish all test results
        if: always()
        uses: pmeier/pytest-results-action@v0.7.1
        with:
          path: pytest/fortiqa/tests/results.xml
          summary: true
          display-options: fsEXxX
          title: Complete Test Results
          fail-on-empty: true


      - name: Archive test results  #upload the test result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test-Results-${{ env.test_start_time }}-to-${{ env.test_end_time }}
          path: |
            pytest/fortiqa/tests/report.html
            pytest/fortiqa/tests/results.xml
            pytest/fortiqa/tests/lacework_test.log
            pytest/fortiqa/tests/pytest_output.log
