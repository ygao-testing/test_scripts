import logging
import pytest

from datetime import datetime, timedelta
from fortiqa.libs.lw.apiv1.api_client.query_card.query_card import QueryCard

logger = logging.getLogger(__name__)


@pytest.mark.qa_pre_merge
@pytest.mark.parametrize("query_card", ["HostVuln_StatsSummaryCVETrend", "HostVuln_HostsSummaryAll_MV_NamedSet"])
@pytest.mark.parametrize("eval_status_list", [["Success", "Failure", "Unsupported"]], indirect=True)
@pytest.mark.parametrize("fixability_list", [[0, 1]], indirect=True)
@pytest.mark.parametrize("severity_list", [['Critical', 'High', 'Medium', 'Low', 'Info']], indirect=True)
@pytest.mark.parametrize("coverage_type_list", [["Agent", "Agentless", "Agent and Agentless"]], indirect=True)
@pytest.mark.parametrize("host_type_list", [['Online', 'Offline']], indirect=True)
@pytest.mark.parametrize("cve_status_list", [['Active', 'New', 'Exception', 'Reopened', 'Unknown']], indirect=True)
def test_host_vuln_filter_v1(api_v1_client, query_card, eval_status_payload, fixability_payload, severity_payload, coverage_type_payload, host_type_payload, cve_status_payload):
    """Test case for Host vulnerability page using different filter using query card V1 API

    Given: Filters payloads generated from fixtures, and different query card
    When: Query Card V1 API will be called to execute the given query card
    Then: API response should return a 200 status code.

    Args:
        api_v1_client: API V1 client for interacting with the Lacework.
        query_card: Query card to be tested
        eval_status_payload: Scan status filter in UI
        fixability_payload: Fixability filter in UI
        severity_payload: Severity filter in UI
        coverage_type_payload: Coverage type filter in UI
        host_type_payload: Machine status filter in UI
        cve_status_payload: CVE status filter in UI
    """
    query_card_api = QueryCard(api_v1_client)
    current_time = datetime.now()
    seven_days_ago = current_time - timedelta(days=7)
    tomorrow = current_time + timedelta(days=1)
    payload = {
        "ParamInfo": {
            "StartTimeRange": int(seven_days_ago.timestamp()),
            "EndTimeRange": int(tomorrow.timestamp()),
            "EnableEvalDetailsMView": True
        },
        "Filters": {
            "HostVuln_Filters.CVE_STATUS": cve_status_payload,
            "HostVuln_Filters.HOST_TYPE": host_type_payload,
            "HostVuln_Filters.COVERAGE_TYPES": coverage_type_payload,
            "HostVuln_Filters.SEVERITY": severity_payload,
            "HostVuln_Filters.FIX_AVAILABLE": fixability_payload,
            "HostVuln_Filters.EVAL_STATUS": eval_status_payload,
        }
    }
    query_card_response = query_card_api.exec_query_card(card_name=query_card, payload=payload)
    assert query_card_response.status_code == 200, f"Failed to execute the card, error: {query_card_response.text}"
    logger.info(f"Query card {query_card} response: {query_card_response.json()}")
