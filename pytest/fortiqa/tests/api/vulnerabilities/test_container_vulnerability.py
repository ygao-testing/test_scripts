import logging
import pytest
import json

from datetime import datetime, timedelta
from fortiqa.libs.lw.apiv1.api_client.query_card.query_card import QueryCard
from fortiqa.libs.lw.apiv1.payloads import ContainerVulnerabilityFilter

logger = logging.getLogger(__name__)


@pytest.mark.qa_pre_merge
@pytest.mark.parametrize("query_card", ["Vuln_StatsSummaryAll_MV", "Vuln_StatsSummaryCVETrend_MV"])
@pytest.mark.parametrize("cve_status_list", [["GOOD", "EXCEPTION", "VULNERABLE"]], indirect=True)
@pytest.mark.parametrize("fixability_list", [[0, 1]], indirect=True)
@pytest.mark.parametrize("privileged_list", [[(0, True), (0, False)]], indirect=True)  # {value: "0", filterGroup: "eq"} and {value: "0", filterGroup: "gt"} means Privileged and Not privileged in UI
@pytest.mark.parametrize("severity_list", [['Critical', 'High', 'Medium', 'Low', 'Info']], indirect=True)
@pytest.mark.parametrize("coverage_type_list", [["agentless_scanner", "platform_scanner", "inline_scanner", "proxy_scanner"]], indirect=True)
@pytest.mark.parametrize("policy_status_list", [['PASS', 'VIOLATED']], indirect=True)
@pytest.mark.parametrize("internet_exposure_list", [['Yes', 'No', 'Unknown']], indirect=True)
def test_container_vuln_filter_v1(api_v1_client, query_card, cve_status_payload, fixability_payload, privileged_payload, coverage_type_payload, severity_payload, policy_status_payload, internet_exposure_payload):
    """Test case for Container vulnerability page using different filter using query card V1 API

    Given: Filters payloads generated from fixtures, and different query card
    When: Query Card V1 API will be called to execute the given query card
    Then: API response should return a 200 status code.

    Args:
        api_v1_client: API V1 client for interacting with the Lacework.
        query_card: Query card to be tested
        policy_status_payload: Policy status filter in UI
        fixability_payload: Fixability filter in UI
        severity_payload: Severity filter in UI
        privileged_payload: Priviledge filter in UI
        coverage_type_payload: Coverage type filter in UI
        cve_status_payload: CVE status filter in UI
        internet_exposure_payload: Internet Exposure filter in UI
    """
    query_card_api = QueryCard(api_v1_client)
    current_time = datetime.now()
    seven_days_ago = current_time - timedelta(days=7)
    tomorrow = current_time + timedelta(days=1)
    payload = {
        "ParamInfo": {
            "StartTimeRange": int(seven_days_ago.timestamp()),
            "EndTimeRange": int(tomorrow.timestamp()),
            "EnableEvalDetailsMView": True
        },
        "Filters": {
            ContainerVulnerabilityFilter.cve_status: cve_status_payload,
            ContainerVulnerabilityFilter.fixable: fixability_payload,
            ContainerVulnerabilityFilter.scanner_type: coverage_type_payload,
            ContainerVulnerabilityFilter.cve_severity: severity_payload,
            ContainerVulnerabilityFilter.container_privileged: privileged_payload,
            ContainerVulnerabilityFilter.policy_assessment: policy_status_payload,
            ContainerVulnerabilityFilter.internet_exposed: internet_exposure_payload
        }
    }
    logger.info(f"Payload: {json.dumps(payload, indent=2)}")
    query_card_response = query_card_api.exec_query_card(card_name=query_card, payload=payload)
    assert query_card_response.status_code == 200, f"Failed to execute the card, error: {query_card_response.text}"
    logger.info(f"Query card {query_card} response: {query_card_response.json()}")
