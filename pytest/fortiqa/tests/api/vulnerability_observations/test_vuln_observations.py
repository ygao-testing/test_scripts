import logging

from fortiqa.libs.lw.apiv2.helpers.vulnerability_helper import VulnerabilityHelperV2

logger = logging.getLogger(__name__)


def test_host_vuln_observations(api_v2_client, fetch_host_with_java_packages):
    """
    Verify that Vulnerability Observation returns status code 200 and correct info by filtering by instance_id

    Given: API V2 Client, and a host with package(s) that have java inside package name(s)
    When: Call Vulnerability Observation API, using filter machineTags -> InstanceId
    Then: Expect status code returned is 200, and there exists vulnerability caused by package(s) that have java in name(s)

    Args:
        api_v2_client: API V2 client for interacting with the Lacework
        fetch_host_with_java_packages: Fixture to return a host that meet prerequisites
    """
    instance_id = fetch_host_with_java_packages['MACHINE_TAGS'].get("InstanceId", "")
    if not instance_id:
        raise Exception(f"There is no instance_id for host: {fetch_host_with_java_packages}")
    response = VulnerabilityHelperV2(api_v2_client).fetch_host_vulnerability_observation_by_tag(tag_name="InstanceId", tag_value=instance_id)
    assert response, f"Fail to get data from Vulnerability Observation API, {response=}"
    found = False
    for vulnerability in response:
        if "java" in vulnerability['packageName']:
            found = True
            break
    assert found, f"Expected to find package(s) with java in package_name(s), but got {response=}"


def test_image_vuln_observations(api_v2_client, fetch_image_with_python_packages):
    """
    Verify that Vulnerability Observation returns status code 200 and correct info by filtering by image_id

    Given: API V2 Client, and a container image with python packages
    When: Call Vulnerability Observation API, using filter imageId
    Then: Expect status code returned is 200, and there exists vulnerability caused by python packages

    Args:
        api_v2_client: API V2 client for interacting with the Lacework
        fetch_image_with_python_packages: Fixture to return a container image that meet prerequisites
    """
    image_id = fetch_image_with_python_packages['IMAGE_ID']
    if not image_id:
        raise Exception(f"There is no container image: {fetch_image_with_python_packages}")
    response = VulnerabilityHelperV2(api_v2_client).fetch_container_vulnerability_observation_by_image_id(image_id=image_id)
    assert response, f"Fail to get data from Vulnerability Observation API, {response=}"
    found = False
    for vulnerability in response:
        if "python" in vulnerability['packageNamespace']:
            found = True
            break
    assert found, f"Expected to find python packages, but got {response=}"
