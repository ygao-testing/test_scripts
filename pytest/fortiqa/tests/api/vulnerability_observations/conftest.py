import pytest
import logging

from fortiqa.libs.lw.apiv1.api_client.new_vuln.payloads import NewVulnDataclass, QueryEntity, ComparisonOperator
from fortiqa.tests.api.new_vulnerabilities.conftest import generate_new_vuln_payload_and_query

logger = logging.getLogger(__name__)


@pytest.fixture(scope="package")
def fetch_host_with_java_packages(api_v1_client):
    """Fixture to fetch a host with package(s) that have name(s) contain java"""
    query_object = NewVulnDataclass(type=QueryEntity.HOSTS)
    query_object.add_filter(type="PackageFilter",
                            key="PACKAGE_NAME",
                            value="java",
                            operator=ComparisonOperator.CONTAINS)
    json_response = generate_new_vuln_payload_and_query(api_v1_client=api_v1_client,
                                                        query_object=query_object,
                                                        query_type="host")
    if not json_response['data']:
        raise Exception("There is no host with package that has java in package name")
    return json_response['data'][0]


@pytest.fixture(scope="package")
def fetch_image_with_python_packages(api_v1_client):
    """Fixture to fetch a container image with python package(s)"""
    query_object = NewVulnDataclass(type=QueryEntity.CONTAINER_IMAGE)
    query_object.add_filter(type="PackageFilter",
                            key="PACKAGE_NAMESPACE",
                            value="python",
                            operator=ComparisonOperator.CONTAINS)
    json_response = generate_new_vuln_payload_and_query(api_v1_client=api_v1_client,
                                                        query_object=query_object,
                                                        query_type="image")
    if not json_response['data']:
        raise Exception("There is no container image with python packages")
    return json_response['data'][0]
