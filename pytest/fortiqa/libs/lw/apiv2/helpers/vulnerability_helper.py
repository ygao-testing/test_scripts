import logging
import time

from copy import deepcopy
from fortiqa.libs.lw.apiv2.api_client.vulnerabilities.vulnerabilities_observations.vulnerabilities_observations import VulnerabilityObservation

logger = logging.getLogger(__name__)


class VulnerabilityHelperV2:
    """
    Helper class for fetching vulnerabilities using Vulnerabilit related V2 APIs.

    This class provides methods to fetch infomations about vulnerabilities about hosts/containers
    from the Lacework platform using the API client V2.
    """
    def __init__(self, user_api):
        self.user_api = user_api
        self.payload_template = {
            "filters": []
        }

    def fetch_host_vulnerability_observation_by_tag(self, tag_name: str, tag_value: str) -> list:
        """
        Fetch host vulnerability observations by tag

        :param tag_name: Tag Name
        :param tag_value: Tag value
        :return: A list of vulnerability observations of that tag name/value
        """
        logger.info(f"fetch_host_vulnerability_observation_by_tag(), {tag_name}:{tag_value}")
        payload = deepcopy(self.payload_template)
        payload['filters'].append({
            "field": f"machineTags.\"{tag_name}\"",
            "expression": "eq",
            "value": tag_value
        })
        response = VulnerabilityObservation(self.user_api).search_host_vulnerability_observations(payload)
        if response.status_code == 204:
            logger.debug(f"Not found any content relates to {tag_name}:{tag_value}")
            return []
        elif response.status_code == 200:
            logger.info(f"Found content relates to {tag_name}:{tag_value}")
            return response.json()['data']
        else:
            raise Exception(f"Received status code {response.status_code}")

    def fetch_container_vulnerability_observation_by_image_id(self, image_id: str) -> list:
        """
        Fetch container vulnerability observations by image_id

        :param image_id: Image ID
        :return: A list of vulnerability observations of that image
        """
        logger.info(f"fetch_container_vulnerability_observation_by_image_id(), {image_id=}")
        payload = deepcopy(self.payload_template)
        payload['filters'].append({
            "field": "imageId",
            "expression": "eq",
            "value": image_id
        })
        response = VulnerabilityObservation(self.user_api).search_image_vulnerability_observations(payload)
        if response.status_code == 204:
            logger.debug(f"Not found any content relates to {image_id=}")
            return []
        elif response.status_code == 200:
            logger.info(f"Found content relates to {image_id=}")
            return response.json()['data']
        else:
            raise Exception(f"Received status code {response.status_code}")

    def wait_until_instance_has_vulnerability_observations(self, instance_id, wait_until: int):
        """Wait for agent host to have more than 0 vulnerability observation."""
        vuln_found = False
        first_try = True
        vuln_observations = []
        while first_try or (time.monotonic() < wait_until and not vuln_found):
            if not first_try:
                time.sleep(240)
            first_try = False
            vuln_observations = self.fetch_host_vulnerability_observation_by_tag(tag_name="InstanceId", tag_value=instance_id)
            if vuln_observations:
                logger.info(f'Found vulnerability observations for agent host {instance_id}')
                vuln_found = True
        if not vuln_found:
            raise TimeoutError(
                f'Agent host {instance_id} does not appear in Vulnerability observations.'
                f'Last API response: {vuln_observations}.'
            )
